# Generated by Django 4.0.4 on 2022-05-12 15:25

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import userapp.models
import utils.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. 64 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=64, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, db_index=True, error_messages={'unique': 'A user with that phone number already exists.'}, help_text='Required. Starts with + country code and 10 numbers.', max_length=12, null=True, unique=True, verbose_name='phone number')),
                ('user_name', models.CharField(blank=True, db_index=True, error_messages={'unique': 'A user with that name already exists.'}, help_text='Required. 64 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=64, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='user name')),
                ('first_name', models.CharField(blank=True, max_length=64, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=64, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date update')),
                ('photo', models.ImageField(blank=True, upload_to=utils.utils.user_photo_directory_path, verbose_name='photo')),
                ('about_me', models.CharField(blank=True, max_length=1024, verbose_name='about me')),
                ('activation_key', models.CharField(blank=True, max_length=128)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'custom user',
                'verbose_name_plural': 'users',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', userapp.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.CharField(choices=[('M', 'мужской'), ('W', 'женский'), ('O', 'предпочитаю не указывать')], default='O', max_length=1, verbose_name='пол')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='дата рождения')),
                ('deposit', models.PositiveIntegerField(blank=True, null=True, verbose_name='Стоимость портфеля')),
                ('annual_tax_amount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Общая сумма налога')),
                ('total_amount_commissions', models.PositiveIntegerField(blank=True, null=True, verbose_name='Общая сумма комиссий')),
                ('number_transactions', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Общее количество сделок')),
                ('transactions_closed_in_profit', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Прибыльных сделок')),
                ('transactions_closed_in_loss', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Убыточных сделок')),
                ('transactions_active', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Не закрытых сделок')),
                ('tagline', models.CharField(blank=True, max_length=128, verbose_name='теги')),
            ],
        ),
    ]
